#include "pch.h"
#include<iostream>
#include "SDL.h"
#include "SDL_image.h"
#include "SDL_TTF.h"


SDL_Window * window = nullptr;
SDL_Color MessageColor;
SDL_Surface* surfaceMessage = nullptr;
SDL_Texture* Message = nullptr;
SDL_Rect * MessageRectPtr = nullptr;
int i = 0;
Uint8 r = 60, g = 60, b = 60;
int counter = 0;

const int Window_Width = 500;
const int Window_Height = 300;

void Init() {
	SDL_Init(SDL_INIT_VIDEO);
	TTF_Init();
	window = SDL_CreateWindow("SDL", SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, Window_Width, Window_Height,SDL_WINDOW_RESIZABLE);
	if (window == NULL) std::cout << SDL_GetError << std::endl;
}

class Rect {
	SDL_Renderer * rend = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED);
	SDL_Rect outline[5];
	SDL_Rect rect[5];
	SDL_Surface * surface = SDL_GetWindowSurface(window);
	SDL_Texture * texture = SDL_CreateTextureFromSurface(rend, surface);
	SDL_Rect MessageRect;
public:
	Rect(int x, int y, int h, int w) {
		for (int i = 0; i < 5;i++) {
			if (i == 0) {
				outline[i].x = x + 2;
				rect[i].x = x + 5;
			}
			else {
				outline[i].x = x + 10 + w + outline[i - 1].x + 2;
				rect[i].x = x + 10 + w + outline[i - 1].x + 5;
			}
			outline[i].y = y + 2;
			outline[i].h = h + 2;
			outline[i].w = w + 2;

			rect[i].y = y + 5;
			rect[i].h = h - 5;
			rect[i].w = w - 5;		
			SDL_SetRenderDrawColor(rend, 255, 255, 255, 255);
			SDL_RenderClear(rend);
			TTF_Font * Sans = TTF_OpenFont("Segoeui.ttf", 50);
			SDL_Color MessageColor = { 0, 0, 0 };
			SDL_Surface* surfaceMessage = TTF_RenderText_Solid(Sans, "Worked", MessageColor);
 			SDL_Texture* Message = SDL_CreateTextureFromSurface(rend, surfaceMessage);
			SDL_Rect MessageRect;
			MessageRectPtr = &MessageRect;
			MessageRectPtr->x = 5;
			MessageRectPtr->y = 7;
			MessageRectPtr->w = 67;
			MessageRectPtr->h = 15;
		}
	}
	void draw() {
		for (int i = 0; i < 5;i++) {
			SDL_SetRenderDrawColor(rend, 40, 40, 40, 255);
			SDL_RenderCopy(rend, texture, NULL, &outline[i]);
			SDL_SetRenderDrawColor(rend, 200, 200, 200, 255);
			SDL_RenderCopy(rend, texture, NULL, &outline[i]);
			SDL_RenderCopy(rend, Message, NULL, &MessageRect);
		}
	}
	void Mouse_Hover() {
		int mX, mY;
		bool inhover = true;
		SDL_Event e;
		while (inhover) {
			SDL_PumpEvents();
			SDL_GetMouseState(&mX, &mY);
			if ((mX > outline[i].x && mX < outline[i].x + outline[i].w) && (mY > outline[i].y && mY < outline[i].y + outline[i].h)) {
				r = 60;
				g = 60;
				b = 60;
				SDL_SetRenderDrawColor(rend, r, g, b, 255);
				SDL_RenderCopy(rend, texture, NULL, &rect[i]);
				SDL_RenderFillRect(rend, &rect[i]);
				SDL_RenderPresent(rend);
				while (SDL_PollEvent(&e))
					if (e.type == SDL_MOUSEBUTTONDOWN)
						std::cout << "You pressed button " << i+1 << std::endl;
				TTF_Font * Sans = TTF_OpenFont("Segoeui.ttf", 50 );
				SDL_Color MessageColor = { 0, 0, 0 };
				SDL_Surface* surfaceMessage = TTF_RenderText_Solid(Sans, "Worked", MessageColor);
				SDL_Texture* Message = SDL_CreateTextureFromSurface(rend, surfaceMessage);

				SDL_Rect MessageRect;
				MessageRect.x = 7;
				MessageRect.y = 4;
				MessageRect.w = 67;
				MessageRect.h = 15;
				SDL_RenderCopy(rend, Message, NULL, &MessageRect);
			}
			else{
				if (r + g + b != 600 || counter <= 5){
					r = 200;
					g = 200;
					b = 200;
					SDL_SetRenderDrawColor(rend, r, g, b, 255);
					SDL_RenderCopy(rend, texture, NULL, &rect[i]);
					SDL_RenderFillRect(rend, &rect[i]);
					SDL_RenderPresent(rend);
					SDL_RenderCopy(rend, Message, NULL, &MessageRect);
					TTF_Font * Sans = TTF_OpenFont("Segoeui.ttf", 50);
					SDL_Color MessageColor = { 0, 0, 0 };
					SDL_Surface* surfaceMessage = TTF_RenderText_Solid(Sans, "Worked", MessageColor);
					SDL_Texture* Message = SDL_CreateTextureFromSurface(rend, surfaceMessage);

					SDL_Rect MessageRect;
					MessageRect.x = 7;
					MessageRect.y = 4;
					MessageRect.w = 67;
					MessageRect.h = 15;
					SDL_RenderCopy(rend, Message, NULL, &MessageRect);
					counter++;
				}
				inhover = false;
			}
		}		
	}
	
	
	void TTF() {
		//TTF_Font * Sans = TTF_OpenFont("Segoeui.ttf", 50 );
		//SDL_Color MessageColor = { 0, 0, 0 };
		//SDL_Surface* surfaceMessage = TTF_RenderText_Solid(Sans, "Worked", MessageColor);
		//SDL_Texture* Message = SDL_CreateTextureFromSurface(rend, surfaceMessage);

		//SDL_Rect MessageRect;
		//MessageRect.x = 7;
		//MessageRect.y = 4;
		//MessageRect.w = 67;
		//MessageRect.h = 15;
		//SDL_RenderCopy(rend, Message, NULL, &MessageRect);
	}

	void Destroy() {
		SDL_FreeSurface(surface);
		SDL_FreeSurface(surfaceMessage);
		SDL_DestroyTexture(texture);
		SDL_DestroyTexture(Message);
		SDL_DestroyRenderer(rend);
		SDL_DestroyWindow(window);
		TTF_Quit();
		SDL_Quit();
	}
};

int main(int argc, char *argv[]) {
	Init();
	SDL_Event  event;
	Rect Button(1, 0, 20, 80);
	Button.draw();
	bool running = true;
	while (running == true) {
		Button.Mouse_Hover();
		while (SDL_PollEvent(&event)) {
			if (event.type == SDL_QUIT) {
				running = false;
			}	
		}
		Button.TTF();
		i++;
		if (i == 5)i = 0;
	}
	TTF_GetError();
	Button.Destroy();
	return 0;
}
